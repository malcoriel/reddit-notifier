swagger: "2.0"
info:
  description: "This is a reddit-notifier service. It can allow you to subscribe to your favorite subreddits top posts. There is no authentication, everything is accessible as-is."
  version: "1.0.0"
  title: "Reddit notifier"
  contact:
    email: "malcoriel@gmail.com"
  license:
    name: "MIT"
    url: "https://mit-license.org/"
basePath: "/"
tags:
  - name: "subscription"
    description: "All operations related about subscribing to subreddits"
  - name: "user"
    description: "All operations about managing users"
schemes:
  - "http"
paths:
  /user:
    get:
      tags:
        - "user"
      summary: "Get all registered users"
      produces:
        - "application/json"
      responses:
        default:
          description: "List of users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
        - "user"
      summary: "Create user"
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User to create"
          required: true
          schema:
            $ref: "#/definitions/CreateUser"
      responses:
        default:
          description: "Created user"
          schema:
            $ref: "#/definitions/User"
  /user/{userId}:
    get:
      tags:
        - "user"
      summary: "Get user by id"
      operationId: "getUser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "The id of the user"
          required: true
          type: "string"
      responses:
        "200":
          description: "Found user"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Update user's properties"
      operationId: "updateUserEmail"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "User id that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/UpdateUser"
      responses:
        "200":
          description: "Updated user"
          schema:
            $ref: "#/definitions/User"
        "401":
          description: "No email supplied"
        "404":
          description: "User not found"
  /subscription:
    get:
      tags:
        - "subscription"
      summary: "Get all subscriptions data"
      produces:
        - "application/json"
      responses:
        default:
          description: "List of subscriptions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Subscription"
    post:
      tags:
        - "subscription"
      summary: "Create a subscription for a user"
      operationId: "createSubscription"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Properties"
          required: true
          schema:
            $ref: "#/definitions/CreateSubscription"
      responses:
        default:
          description: "Created subscription"
          schema:
            $ref: "#/definitions/Subscription"
  /subscription/{subscriptionId}:
    get:
      tags:
        - "subscription"
      summary: "Get subscription by id"
      operationId: "getSubscription"
      produces:
        - "application/json"
      parameters:
        - name: "subscriptionId"
          in: "path"
          description: "The id of the subscription"
          required: true
          type: "string"
      responses:
        "200":
          description: "Found subscription"
          schema:
            $ref: "#/definitions/Subscription"
        "404":
          description: "Subscription not found"
    put:
      tags:
        - "subscription"
      summary: "Update subscription's properties"
      operationId: "updateSubscription"
      produces:
        - "application/json"
      parameters:
        - name: "subscriptionId"
          in: "path"
          description: "The id of the subscription"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated subscription object"
          required: true
          schema:
            $ref: "#/definitions/UpdateSubscription"
      responses:
        "200":
          description: "Updated subscription"
          schema:
            $ref: "#/definitions/Subscription"
        "401":
          description: "Incorrect values of properties"
        "404":
          description: "Subscription not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
  UpdateUser:
    type: "object"
    properties:
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
  CreateUser:
    type: "object"
    properties:
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
  CreateSubscription:
    type: "object"
    properties:
      forUserId:
        type: "string"
  Subscription:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "If true, the newsletter will be sent at the designated time"
      notificationMinuteOffsetUTC:
        type: "number"
        description: "Offset from 00:00Z in minutes, defining the time"
      userId:
        type: "string"
        description: "The corresponding user id"
      subreddits:
        type: "array"
        description: "The list of favorite subreddits"
        items:
          type: "string"
  UpdateSubscription:
    type: "object"
    properties:
      enabled:
        type: "boolean"
      time:
        type: "string"
        description: "ISO-formatted time, including time zone"
        example: "10:00+01:00"
      subreddits:
        type: "array"
        description: "The list of favorite subreddits"
        items:
          type: "string"

